package maven;

/**
 * maven的优点:
 *	    1.项目非常大时，可借助Maven将一个项目拆分成多个工程，最好是一个模块对应一个工程，利于分工协作。而且模块之间还是可以发送消息的。
 *	    2.借助Maven，可将jar包仅仅保存在“仓库”中，有需要该文件时，就引用该文件接口，不需要复制文件过来占用空间
 *	    3.借助Maven可以以规范的方式下载jar包，因为所有的知名框架或第三方工具的jar包已经按照统一的规范存放到了Maven的中央仓库中
 *
 * Maven便给我们制定了一套规则那就是使用坐标进行唯一标识。只要我们提供正确的坐标元素，Maven就能找到对应的构件，首先去你的本地仓库查找，没有的话再去远程仓库下载,还没有就去中央仓库下载.
 * pom.xml文件添加坐标
 *  groupId         定义当前Maven项目隶属的实际项目。
 *  artifactId      该元素定义当前实际项目中的一个Maven项目（模块），推荐的做法是使用实际项目名称作为artifactId的前缀。
 *  version         该元素定义了使用构件的版本.
 *  packaging       定义Maven项目打包的方式，使用构件的什么包。(不常用)
 *  classifier      该元素用来帮助定义构建输出的一些附件。(不常用)
 *
 *
 * maven工程目录结构
 *  src/main/java —— 存放项目的.java文件
 *  src/main/resources —— 存放项目资源文件，如spring, hibernate配置文件
 *  pom.xml——maven项目核心配置文件
 *  src/test/java —— 存放所有单元测试.java文件，如JUnit测试类.   但不会进入打包阶段,打成war包,只编译在测试阶段.
 *
 *
 *
 * Clean Lifecycle 在进行真正的构建之前进行一些清理工作。
 * clear:清除target目录.
 *
 *
 * Default Lifecycle 构建的核心部分，编译，测试，打包，部署等等。
 *
 * validate:    验证项目是正确的，所有必要的信息都是可用的
 * compile:     编译项目的源代码
 * test:        使用适当的单元测试框架测试编译后的源代码。这些测试不应要求将代码打包或部署
 * package:     使用已编译的代码，并将其打包成可分布格式，例如JAR。
 * verify:      对集成测试的结果进行任何检查，以确保满足质量标准
 * install:     将包安装到本地存储库中，以便在本地其他项目中使用该包
 * deploy:      在构建环境中完成，将最终的包复制到远程存储库中，以便与其他开发人员和项目共享。
 *
 *
 * Site Lifecycle 生成项目报告，站点，发布站点。(真正发布项目部署阶段,后期学习)
 */
public class maven概念 {
}
